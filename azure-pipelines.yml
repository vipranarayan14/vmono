# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

strategy:
  matrix:
    linux:
      imageName: 'ubuntu-16.04'
    mac:
      imageName: 'macos-10.14'
    windows:
      imageName: 'vs2017-win2016'

pool:
  vmImage: $(imageName)

variables:
  python.version: 3.7.6

steps:

- bash: |
    VERSION_TAG=`git describe --abbrev=0 --tags` && echo "##vso[task.setvariable variable=VERSION_TAG]$VERSION_TAG"
    echo $VERSION_TAG
  displayName: Set VERSION_TAG
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- script: |
    python -m pip install --upgrade pip
    pip install pipenv
  displayName: 'Install Python Dependencies'

- script: |
    pipenv install
    pipenv graph
  displayName: 'Install Package Dependencies'

- script: |
    sudo apt-get install ruby ruby-dev rubygems build-essential
    sudo gem install --no-document fpm 
    fpm --version
  condition: eq( variables['Agent.OS'], 'Linux' )
  displayName: 'Install FBS Dependencies'

- script: |
    pipenv run fbs freeze
  displayName: 'Build App'

- script: |
    pipenv run fbs installer
  displayName: 'Make Installer'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: 'target/vMono/'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/vMono-windows-portable.zip'
    replaceExistingArchive: true
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: 'Make Windows Portable App'

- task: CopyFiles@2
  inputs:
    SourceFolder: 'target/'
    Contents: |
      *.deb
      *.dmg
      *Setup.exe
      *-windows-portable.zip
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
  displayName: 'Copy Assets to Artifact Directory'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: '$(System.JobName)'
  displayName: 'Publish Assets in Artifact Directory'

- task: GitHubRelease@1
  inputs:
    gitHubConnection: 'github.com_vipranarayan14'
    repositoryName: '$(Build.Repository.Name)'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tag: '$(VERSION_TAG)'
    title: '$(VERSION_TAG)'
    assetUploadMode: 'replace'
    changeLogCompareToRelease: 'lastFullRelease'
    changeLogType: 'commitBased'
  displayName: 'Create GitHub Releases with Assets'
