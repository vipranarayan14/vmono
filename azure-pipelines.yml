# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

strategy:
  matrix:
    linux:
      imageName: 'ubuntu-16.04'
    mac:
      imageName: 'macos-10.14'
    windows:
      imageName: 'vs2017-win2016'

pool:
  vmImage: $(imageName)

variables:
  python.version: 3.7.6

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- script: |
    python -m pip install --upgrade pip
    pip install pipenv
    pipenv install
  displayName: 'Install Dependencies'

- script: |
    pipenv install pypiwin32
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: 'Install Windows Dependencies'

- script: |
    sudo apt-get remove ruby

    sudo apt-get update 
    sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev

    git clone https://github.com/rbenv/rbenv.git ~/.rbenv
    echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bashrc
    echo 'eval "$(rbenv init -)"' >> ~/.bashrc
    exec $SHELL

    git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
    echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' >> ~/.bashrc
    exec $SHELL

    ruby_latest=$(rbenv install -l | grep -v - | tail -1)
    rbenv install ruby_latest
    rbenv global ruby_latest
    
    ruby -v
    gem -v
    
    gem install --no-document fpm
    fpm --version
  condition: eq( variables['Agent.OS'], 'Linux' )
  displayName: 'Install Linux Dependencies'

- script: |
    pipenv graph
    pipenv run fbs freeze
  displayName: 'Build App'

- script: |
    pipenv run fbs installer
  displayName: 'Make Installer'

# - publish: $(System.DefaultWorkingDirectory)
 
# - task: DownloadBuildArtifacts@0
#   displayName: Download Build Artifacts
#   inputs:
#     buildType: 'current'
#     branchName: 'refs/heads/master'
#     buildVersionToDownload: 'latest'
#     downloadType: 'specific'
#     downloadPath: '$(System.ArtifactsDirectory)'